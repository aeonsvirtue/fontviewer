/*
 * Copyright 2021 <a href="mailto:dev@aeonsvirtue.com">Aeon's Virtue (K. Geltmeier)</a>.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License,
 * Version v. 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * If a copy of the MPL was not distributed with this file, you can obtain one
 * at
 *
 *      https://mozilla.org/MPL/2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.aeonsvirtue.fontviewer;

import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.HashSet;
import java.util.Set;
import javax.swing.JList;
import javax.swing.ListModel;
import javax.swing.Timer;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.event.ListDataEvent;
import javax.swing.event.ListDataListener;

/**
 *
 * @author <a href="mailto:dev@aeonsvirtue.com">Aeon's Virtue (K. Geltmeier)</a>
 */
public class FontPanel extends javax.swing.JPanel {
    private Font[] fonts;
    private final Set<ListDataListener> listener = new HashSet<>();    
    private Timer updateTimer;
    private final int updateDelay = 500; // ms
    private final String[] text = {""};
    
    /**
     * Creates new form FontPanel
     */
    public FontPanel() {
        initComponents();
        setText(tfText.getText());
        tfText.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                update();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                update();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                update();
            }
        });
    }
    
    private void setText(String text) {
        this.text[0] = text;
    }
    
    private void update() {
        if (updateTimer == null) {
            updateTimer = new Timer(updateDelay, new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    float size = (float)(int)spFontSize.getValue();
                    int style = Font.PLAIN + (cbBold.isSelected() ? Font.BOLD : 0) + (cbItalic.isSelected() ? Font.ITALIC : 0);
                    setText(tfText.getText());

                    for (int i=0; i<fonts.length; i++) {
                        lFontList.getModel().getElementAt(i).setFont(fonts[i].deriveFont(size).deriveFont(style));
                    }
                    fireChangeEvent();
                    updateTimer.stop();
                    updateTimer = null;            
                }
            });
            updateTimer.start();
        } else {
            updateTimer.restart();
        }
    }
    
    private void fireChangeEvent() {
        for (ListDataListener l : listener) {
            l.contentsChanged(new ListDataEvent(this, ListDataEvent.CONTENTS_CHANGED, 0, fonts.length));
        }
    }
    
    protected void setFonts(final Font[] fonts) {
        this.fonts = fonts;
        lFontList.setModel(new ListModel(){
            private final FontItem[] fontItems = new FontItem[fonts.length];
            {for (int i=0;i<fontItems.length; i++) {fontItems[i] = new FontItem(fonts[i], text);}}
            @Override public int getSize() {return fontItems.length;}
            @Override public FontItem getElementAt(int index) {return fontItems[index];}
            @Override public void addListDataListener(ListDataListener l) {listener.add(l);}
            @Override public void removeListDataListener(ListDataListener l) {listener.remove(l);}
        });
        lFontList.setCellRenderer((JList<? extends FontItem> list, FontItem value, int index, boolean isSelected, boolean cellHasFocus) -> value);        
        update();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tfText = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        lFontList = new javax.swing.JList<>();
        spFontSize = new javax.swing.JSpinner();
        cbBold = new javax.swing.JCheckBox();
        cbItalic = new javax.swing.JCheckBox();

        tfText.setText("The quick brown fox jumps over the lazy dog.");

        jScrollPane1.setViewportView(lFontList);

        spFontSize.setValue(80);
        spFontSize.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spFontSizeStateChanged(evt);
            }
        });

        cbBold.setText("bold");
        cbBold.setActionCommand("BOLD");
        cbBold.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbBoldActionPerformed(evt);
            }
        });

        cbItalic.setText("italic");
        cbItalic.setActionCommand("ITALIC");
        cbItalic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbItalicActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tfText)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(cbBold)
                .addGap(8, 8, 8)
                .addComponent(cbItalic)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(spFontSize, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 644, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spFontSize, javax.swing.GroupLayout.DEFAULT_SIZE, 24, Short.MAX_VALUE)
                    .addComponent(cbBold)
                    .addComponent(cbItalic))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tfText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 340, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void cbBoldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbBoldActionPerformed
        update();
    }//GEN-LAST:event_cbBoldActionPerformed

    private void cbItalicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbItalicActionPerformed
        update();
    }//GEN-LAST:event_cbItalicActionPerformed

    private void spFontSizeStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spFontSizeStateChanged
        update();
    }//GEN-LAST:event_spFontSizeStateChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox cbBold;
    private javax.swing.JCheckBox cbItalic;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList<FontItem> lFontList;
    private javax.swing.JSpinner spFontSize;
    private javax.swing.JTextField tfText;
    // End of variables declaration//GEN-END:variables
}
